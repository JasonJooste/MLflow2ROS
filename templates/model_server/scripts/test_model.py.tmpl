#!/usr/bin/env python

import unittest

import numpy as np
import rospy
from {{ msg_pkg }} import srv

RANDINT_MIN=-100
RANDINT_MAX=100

class TestResponse(unittest.TestCase):
    def test_response(self):
        """ Simply test that a response is given when a correctly-formatted input is given"""
        rospy.init_node("test_node", anonymous=False)
        # NOTE: This might have to change with message coersion
        # NOTE: With templating we could probably only inlcude the code for the relevant datatype here
        # NOTE: Should this come from the message or from the template?
        dtype = "{{ request.base_dtype }}"
        shape = np.array({{request.shape}})
        # Replace -1 with 2 to add multiple elements in that dimension
        shape[shape == -1] = 2
        if dtype == "bool":
            test_data = np.random.rand(*shape) > 0.5
        elif dtype in ["int8", "int16", "int32", "int64", "intp"]:
            test_data = np.random.randint(RANDINT_MAX, RANDINT_MAX,size=shape).astype(dtype)
        elif dtype in ["uint8", "uint16", "uint32", "uint64", "uintp"]:
            test_data = np.random.randint(0, RANDINT_MAX, size=shape).astype(dtype)
        elif dtype in ["float16", "float32", "float64"]:
            test_data = np.random.rand(*shape).astype(dtype)
        else:
            raise ValueError(f"Given datatype {dtype} is not supported for testing")

        # Formulate the data into a request message
        req = srv.{{ model_name }}Request(test_data.ravel())

        # Check that service is present
        service_name = "{{ model_name }}"
        rospy.loginfo(f"Waiting for test service {service_name}")
        rospy.wait_for_service(service_name)
        
        # Establish a connection with the service
        model_inference = rospy.ServiceProxy(
            service_name, srv.{{ model_name }}
        )
        try:
            rospy.logdebug("Sending request")
            response = model_inference(req)
        except rospy.ServiceException as exc:
            rospy.logerr("Service did not process request: " + str(exc))
        rospy.logdebug("Received response")
        # Check that the response is the correct shape
        data = response.model_out
        shape = [int(d) for d in response.OUT_SHAPE.strip("[]").split(",")]
        # Attempt to shape into the correct format - this will fail if the response is not in the correct shape
        res_dtype = "{{ response.base_dtype }}"
        np.reshape(np.array(data, dtype=res_dtype), shape)
        

if __name__ == "__main__":
    import rostest
    rostest.rosrun("{{ model_name }}", "TestResponse", TestResponse)
