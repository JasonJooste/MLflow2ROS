#!/usr/bin/env python

import functools

import mlflow
import rospy
import numpy as np

from tracking_quickstart_msgs import srv

def message_interface(request, model):
    """Converts the inputs and outputs to and from ROS messages respectively"""

    # Get raw data from the ROS request
    data = np.array(request.tracking_quickstart_req)

    # reshape request if necessary
    data = data.reshape(-1, 4)

    # Use the model to make the prediction
    predictions = model.predict(data)

    # flatten predictions array 
    predictions = predictions.ravel()

    # Build a service response from the prediction
    response = srv.tracking_quickstart_resResponse(predictions)

    return response


def main():
    """Start the model node with the message interface function as the service command"""
    rospy.init_node("tracking_quickstart")

    # Pull in the mlflow model
    pyfunc_model = mlflow.pyfunc.load_model(model_uri=f"/opt/ml/model")
    rospy.loginfo("Model loaded")

    rospy.Service(
        "tracking_quickstart_service",
        srv.tracking_quickstart,
        functools.partial(message_interface, model=pyfunc_model),
    )

    rospy.spin()


if __name__ == "__main__":
    main()
  