#!/usr/bin/env python

import functools

import mlflow
import rospy
import numpy as np

import tracking_quickstart.srv

def message_interface(request, model):
  """Converts the inputs and outputs to and from ROS messages respectively"""

  # Build a model request
  data = np.array(request.tracking_quickstart_res).reshape(-1, 4)
  
  print(tracking_quickstart.srv.REQ_SHAPE)

  # Use the model to make the prediction
  predictions = model.predict(data)

  # Build a service response from the prediction
  response = tracking_quickstart.srv.tracking_quickstartResponse(predictions)

  return response


def main():
  """Start the model node with the message interface function as the service command"""
  rospy.init_node("tracking_quickstart", anonymous=False)

  # Pull in the egonn model
  pyfunc_model = mlflow.pyfunc.load_model(model_uri=f"/opt/ml/model")
  rospy.loginfo("Model loaded")

  rospy.Service(
      "tracking_quickstart_service",
      tracking_quickstart.srv.tracking_quickstart,
      functools.partial(message_interface, model=pyfunc_model),
  )

  rospy.spin()


if __name__ == "__main__":
  main()